package com.ciclo4.rest_controller;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.ciclo4.exception.BaseCustomException;
import com.ciclo4.model.Order;
import com.ciclo4.security.CustomUserDetails;
import com.ciclo4.service.OrderServiceImpl;
import com.ciclo4.service.UtilsService;

@RestController
@CrossOrigin(origins = "*", methods = { RequestMethod.GET })
@RequestMapping("/utils")
public class UtilsRestController {

	@Autowired
	private UtilsService service;

	@Autowired
	private OrderServiceImpl orderService;

	/**
	 * Genera un nuevo id para la orden a crear
	 * 
	 * @param userDetails
	 * @return Integer
	 */
	@GetMapping("/get_autogenerated_order_id")
	public Integer getIdNewOrder(@AuthenticationPrincipal CustomUserDetails userDetails) {
		try {
			System.out.println(userDetails.getId());
			return service.getAutogeneratedOrderId(userDetails.getId());
		} catch (NoSuchElementException e) {
			throw new BaseCustomException("No se pudo resolver la solicitud, puede que no seas un Asesor Comercial",
					HttpStatus.INTERNAL_SERVER_ERROR.value());
		}
	}

	/**
	 * Regresa la informacion del usuario autenticado
	 * 
	 * @param userDetails
	 * @return Map
	 */
	@GetMapping("/get_user_info")
	public Map<String, Object> getUserInfo(@AuthenticationPrincipal CustomUserDetails userDetails) {
		try {
			return userDetails.getDetails();
		} catch (NullPointerException e) {
			throw new BaseCustomException("No se pudo obtener la informacion del usuario",
					HttpStatus.INTERNAL_SERVER_ERROR.value());

		}
	}

	// Como genera error la otra peticion desde js, se usa esta para
	// generar la lista de ordenes en el modal ya que no recibe variable
	@GetMapping("/all_ase_orders")
	public List<Order> getAseOrders(@AuthenticationPrincipal CustomUserDetails userDetails) {
		try {
			return orderService.getAseOrders(userDetails.getZone());
		} catch (Exception e) {
			throw new BaseCustomException("No se pudo resolver la solicitud, intentalo de nuevo",
					HttpStatus.INTERNAL_SERVER_ERROR.value());
		}
	}

	/**
	 * Obtiene la zona del usuario autenticado
	 * 
	 * @param userDetails
	 * @return String
	 */
	@GetMapping("/get_user_zone")
	public String getUserZone(@AuthenticationPrincipal CustomUserDetails userDetails) {
		try {
			return userDetails.getZone();
		} catch (NullPointerException e) {
			throw new BaseCustomException("No se pudo obtener la zona del usuario",
					HttpStatus.INTERNAL_SERVER_ERROR.value());
		}
	}

	/**
	 * Verifica si un asesor tiene vinculado un coordinador de zona
	 * 
	 * @param userDetails
	 * @return boolean
	 */
	@GetMapping("/ase_has_coord_by_zone")
	public boolean aseIsAbleToMakeOrders(@AuthenticationPrincipal CustomUserDetails userDetails) {
		try {
			return service.aseHasCoordByZone(userDetails.getId(), userDetails.getZone());
		} catch (NoSuchElementException e) {
			throw new BaseCustomException("No se pudo resolver la solicitud, puede que no seas un Asesor Comercial",
					HttpStatus.INTERNAL_SERVER_ERROR.value());
		}

	}
}
