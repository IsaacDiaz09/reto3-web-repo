package com.ciclo4.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ciclo4.model.Order;
import com.ciclo4.model.User;
import com.ciclo4.repository.OrderRepository;
import com.ciclo4.repository.UserRepository;

@Service
public class UtilsService {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private OrderRepository orderRepository;

	/**
	 * Verifica si un ASE esta asociado a un COORD por su zona
	 * 
	 * @param idASE
	 * @param zone
	 * @return boolean
	 * @throws NoSuchElementException
	 */
	public boolean aseHasCoordByZone(Integer idASE, String zone) throws NoSuchElementException {
		User ase = userRepository.findByIdAndType(idASE, "ASE").get();
		List<User> coords = userRepository.findAllByZoneAndType(zone, "COORD");

		for (User coord : coords) {
			if (coord.getZone().equals(ase.getZone())) {
				return true;
			}
		}
		return false;
	}

	public List<Order> getAseOrders(Integer id) throws NoSuchElementException {
		Optional<User> ase = userRepository.findByIdAndType(id, "ASE");

		if (ase.isPresent()) {
			List<Order> aseOrders = new ArrayList<Order>();

			List<Order> orders = orderRepository.findAll();
			for (Order order : orders) {
				if (order.getSalesMan().getId() == ase.get().getId()) {
					aseOrders.add(order);
				}
			}

			return aseOrders;
		}
		throw new NoSuchElementException();

	}

	/**
	 * Se busca el id de orden mas alto para evitar conflictos y se regresa
	 * 
	 * @param idASE
	 * @return String
	 * @throws NoSuchElementException
	 */
	public Integer getAutogeneratedOrderId(Integer idASE) throws NoSuchElementException {
		if (userRepository.findByIdAndType(idASE, "ASE").isPresent()) {
			List<Integer> idsOrders = new ArrayList<Integer>();
			List<Order> orders = orderRepository.findAll();

			if (orders.isEmpty()) {
				return 1;
			}

			for (Order order : orderRepository.findAll()) {
				idsOrders.add(order.getId());
			}

			Integer nextId = Collections.max(idsOrders) + 1;
			return nextId;
		}
		throw new NoSuchElementException();
	}

}
